# coding:utf-8

from Crypto import Signature
from Crypto.Cipher import PKCS1_v1_5 as PKCS1_v1_5_Cipher
from Crypto.Hash import SHA, MD5, SHA256
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Util import number
from Crypto.Util._number_new import ceil_div
from xml.dom.minidom import parseString
import M2Crypto 
import Crypto
import base64
import binascii
import os
import re
import rsa
import sys
import hmac
import traceback
import json
import hashlib
import datetime, time
reload(sys)
sys.setdefaultencoding('utf8')
private_key_tpl = '''-----BEGIN PRIVATE KEY-----
%s
-----END PRIVATE KEY-----
'''

public_key_tpl = '''-----BEGIN PUBLIC KEY-----
%s
-----END PUBLIC KEY-----'''

titile = '''-----BEGIN RSA PRIVATE KEY-----
%s
-----END RSA PRIVATE KEY-----'''

def getsign(key, data):
    pri_key = rsa.PrivateKey.load_pkcs1(key)
    signature = rsa.sign(str(data), pri_key, 'SHA-1')
    return base64.b64encode(signature)
    
def jm_sha256(key, value):

    signature = hmac.new(bytes(key), bytes(value),
                         digestmod=hashlib.sha256).hexdigest()
    return signature
def md5(_s):
    return hashlib.new('md5', str(_s)).hexdigest()
    
    
def json_dumps(obj):
    return json.dumps(obj, ensure_ascii=False, cls=DateEncoder)


def get_sign_str(param, ignore=("", None), link="=",
                 join="&", ignore_key=("sign",),
                 change_bool=False, join_value=False, sort=True):
    str_list = []
    _d = param.iteritems()
    if sort:
        _d = sorted(_d)
    for k, v in _d:
        if k in ignore_key or v in ignore:
            continue
        if change_bool and isinstance(v, bool):
            v = "1" if v is True else "0"
        _s = "%s" % v if join_value else "%s%s%s" % (k, link, "" if v is None else v)
        str_list.append(_s)

    return join.join(str_list)


def trans_xml_to_dict(xml):
    from bs4 import BeautifulSoup
    soup = BeautifulSoup(xml, features='xml')
    xml = soup.find('xml')
    if not xml:
        return {}

    data = dict([(item.name, item.text) for item in xml.find_all()])
    return data


def trans_dict_to_xml(data):
    xml = []
    for k in sorted(data.keys()):
        v = data.get(k)
        if k == 'detail' and not v.startswith('<![CDATA['):
            v = '<![CDATA[{}]]>'.format(v)
        xml.append('<{key}>{value}</{key}>\n'.format(key=k, value=v))
    return '<xml>\n{}</xml>'.format(''.join(xml))
    

def ensure_utf8(s):
    if isinstance(s, unicode):
        return s.encode('utf8')
    return s


def decode_base64(data):
    """Decode base64, padding being optional.

    :param data: Base64 data as an ASCII byte string
    :returns: The decoded byte string.

    """
    missing_padding = 4 - len(data) % 4
    if missing_padding:
        data += b'=' * missing_padding
    return base64.decodestring(data)


def base64ToString(s):
    return decode_base64(s)
    return base64.decodestring(s)
    try:
        return base64.b64decode(s)
    except binascii.Error, e:
        raise SyntaxError(e)
    except binascii.Incomplete, e:
        raise SyntaxError(e)


def stringToBase64(s):
    return base64.encodestring(s).replace("\n", "")


def decrypt_with_rsa(msg, key):
    '''
    msg必须采用base64编码，　注意: base64编码的数据经过URLDecoder处理之后，可能不正确，其中的＋会变成' '
    '''
    msg = base64ToString(msg)
    key = RSA.importKey(key)
    cipher = PKCS1_v1_5_Cipher.new(key)

    modBits = number.size(key.n)
    k = ceil_div(modBits, 8)  # Convert from bits to bytes
    print "K: ", k

    msglen = len(msg)
    msg_encryted = ""
    start_idx = 0
    # 处理过长的加密
    while msglen > 0:
        len1 = min([msglen, k])
        cleartext = cipher.decrypt(msg[start_idx: (start_idx + len1)], "")
        msg_encryted = msg_encryted + cleartext
        start_idx = start_idx + len1
        msglen = msglen - len1
    return msg_encryted


def encrypt_with_rsa(msg, key):
    '''
    msg必须采用utf8编码
    '''
    msg = ensure_utf8(msg)

    key = RSA.importKey(key)
    cipher = PKCS1_v1_5_Cipher.new(key)

    modBits = number.size(key.n)
    k = ceil_div(modBits, 8) - 28  # 11 # Convert from bits to bytes
    print "K: ", k

    msglen = len(msg)
    msg_encryted = ""
    start_idx = 0
    # 处理过长的加密
    while msglen > 0:
        len1 = min([msglen, k])
        encrypt = cipher.encrypt(msg[start_idx: (start_idx + len1)])
        msg_encryted = msg_encryted + encrypt
        start_idx = start_idx + len1
        msglen = msglen - len1
    return stringToBase64(msg_encryted)


def check_with_rsa(msg, signature, key, method="SHA"):
    '''
    使用当前文件中定义的_public_rsa_key来验证签名是否正确
    '''
    signature = base64ToString(signature)
    key = RSA.importKey(key)
    if method == "SHA":
        h = SHA.new(msg)
    elif method == "SHA256":
        h = SHA256.new(msg)
    elif method == "MD5":
        h = MD5.new(msg)
    else:
        h = SHA.new(msg)
    verifier = PKCS1_v1_5.new(key)

    return verifier.verify(h, signature)


def sign_with_rsa(msg, key, method="SHA"):
    '''
    将msg使用当前文件中定义的_private_rsa_key来签名, 返回base64编码的字符串
    '''
    key = RSA.importKey(key)
    if method == "SHA":
        h = SHA.new(msg)
    elif method == "SHA256":
        h = SHA256.new(msg)
    elif method == "MD5":
        h = MD5.new(msg)
    else:
        h = SHA.new(msg)
    signer = PKCS1_v1_5.new(key)
    signature = signer.sign(h)
    signature = stringToBase64(signature)
    return signature

def split_rsa_key(key):
    key = str(key)
    return ''.join([('%s\n' % s) if ((i + 1) % 64 == 0) else s for i, s in enumerate(key)])


def get_format_pubkey(key):
    key = re.sub('\s', '', key)
    pub_key = split_rsa_key(key)
    return public_key_tpl % pub_key


# 将公钥字符串转为m2c的对象
def get_m2c_pub(pub_string):  
    return M2Crypto.RSA.load_pub_key_bio(M2Crypto.BIO.MemoryBuffer(pub_string))


# 公钥解密数据
def decrypt(data, m2c_pub, ilen=128):  
    _maxlength = ilen 
    data =data.decode("base64")
    l_dstr = "" 
    while len(data) > 0:
        s = data[:_maxlength]
        l_dstr += m2c_pub.public_decrypt(s, M2Crypto.RSA.pkcs1_padding)
        data = data[_maxlength:]
    return  l_dstr


#公钥签名认证
def pub_verify(data,sign,m2c_pub):
    m = M2Crypto.EVP.MessageDigest('sha1')
    m.update(data)
    digest = m.final()
    sign = sign.decode("base64")
    try:
        return m2c_pub.verify(digest,sign,algo='sha1') 
    except:
        return False
